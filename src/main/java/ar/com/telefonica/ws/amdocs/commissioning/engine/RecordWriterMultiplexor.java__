/** ******************************************************************************************
 * 
 * class RecordWriterMultiplexor
 * 
 * Writer selector for an oRec.
 * 
 * Main responsibilities:
 * 		- Select OutputRecord handlers for each recognized type.
 * 
 * @Exceptions:
 * 		- write					throw			Exception
 * 		- generateOutPutRecFile	throw			Exception
 *  
 *********************************************************************************************
 * 
 * @package	ar.com.telefonica.ws.amdocs.commissioning.engine
 * 
 * @author	FGA <fanzovino@plussistemas.com.ar>
 * @version 1.0
 * @created 31-Jul-2013
 * 
 *********************************************************************************************/

package ar.com.telefonica.ws.amdocs.commissioning.engine;

// import java.util.ArrayList;
// import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.apache.log4j.Logger;

public class RecordWriterMultiplexor extends RecordWriterGeneric {

   static Logger logger = Logger.getLogger(RecordWriterMultiplexor.class);
   
   
   
	/*
	 * constructors:
	 */
	public RecordWriterMultiplexor() {
	
	}
	
	
	
	/*
	 * private variables:
	 */
	// lista de writers
	private Map<String, RecordWriterGeneric> writers = new HashMap<String, RecordWriterGeneric>();
	
	
	
	/* 
	 * setters/getters
	 */
	public Map<String, RecordWriterGeneric> getWriters() {
		return writers;
	}

	public void setWriters(Map<String, RecordWriterGeneric> writers) {
		this.writers = writers;
	}
	
	
	
	/* 
	 * private methods:
	 */

	/* 
	 * public methods:(non-Javadoc)
	 * @see ar.com.telefonica.ws.amdocs.engine.IRecordWriter#write(java.util.List)
	 */
	//Recorre la lista de writers e invoca el metodo apropiado de cada writer
	@Override
	public void open(Object context) throws Exception {
		for (RecordWriterGeneric RWriterGeneric : this.getWriters().values()) {
			RWriterGeneric.open(context);
		}
		return;
	}

	@Override
	public void close() throws Exception {
		for (RecordWriterGeneric RWriterGeneric : this.getWriters().values()) {
			RWriterGeneric.close();
		}
		return;
	}

	@Override
	public void update(Object context) throws Exception {
		return;
	}
	
	
	
	// El metodo lo usa la lista
	// public void write(List<ObjectRecord> obRec) throws Exception()
	
	
	
	@Override
	public void write(ObjectRecord oRec) throws Exception{
        

		if(oRec.getResultStatus().equals(ObjectRecord.ResultStatus.ERROR)){			
			
			oRec.setProcessingStatus(ObjectRecord.ProcessingStatus.COMPLETE);
			logger.warn("The operation [ " + oRec.getRecordId() + " ] canceled with Status = "+oRec.getResultStatus() +".");
			return;
		}
		
		for (OutputRecord outRec : oRec.getOutputRecords()) {
			   if(writers.containsValue(outRec)){
				
				   //TODO: Generar� log indicando el registro (n�mero de operaci�n) y la cantidad de output record types de cada tipo generado.
				   //
			   }else{
				   //If no contains the writer create log
				   logger.error("The operation [ " + oRec.getRecordId() + " ] contain a OutPutType unknow.");
				   oRec.setProcessingStatus(ObjectRecord.ProcessingStatus.COMPLETE);
				   oRec.setResultStatus(ObjectRecord.ResultStatus.ERROR);
				   return;
			   }	
		}
		
	}
	
	public void write(OutputRecord rec) throws Exception{
		//NO Lo usa esta clase
	}
	
}
